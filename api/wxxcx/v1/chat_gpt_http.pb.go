// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.2.1

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type ChatGptHTTPServer interface {
	GetChatGptCompletions(context.Context, *GetChatGptCompletionsRequest) (*GetChatGptCompletionsReply, error)
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
}

func RegisterChatGptHTTPServer(s *http.Server, srv ChatGptHTTPServer) {
	r := s.Route("/")
	r.GET("/wxxcx/chat_gpt/completions", _ChatGpt_GetChatGptCompletions0_HTTP_Handler(srv))
	r.GET("/wxxcx/chat_gpt/ping", _ChatGpt_Ping3_HTTP_Handler(srv))
}

func _ChatGpt_GetChatGptCompletions0_HTTP_Handler(srv ChatGptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetChatGptCompletionsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.wxxcx.v1.chatGpt.ChatGpt/GetChatGptCompletions")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetChatGptCompletions(ctx, req.(*GetChatGptCompletionsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetChatGptCompletionsReply)
		return ctx.Result(200, reply)
	}
}

func _ChatGpt_Ping3_HTTP_Handler(srv ChatGptHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.wxxcx.v1.chatGpt.ChatGpt/Ping")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Ping(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type ChatGptHTTPClient interface {
	GetChatGptCompletions(ctx context.Context, req *GetChatGptCompletionsRequest, opts ...http.CallOption) (rsp *GetChatGptCompletionsReply, err error)
	Ping(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type ChatGptHTTPClientImpl struct {
	cc *http.Client
}

func NewChatGptHTTPClient(client *http.Client) ChatGptHTTPClient {
	return &ChatGptHTTPClientImpl{client}
}

func (c *ChatGptHTTPClientImpl) GetChatGptCompletions(ctx context.Context, in *GetChatGptCompletionsRequest, opts ...http.CallOption) (*GetChatGptCompletionsReply, error) {
	var out GetChatGptCompletionsReply
	pattern := "/wxxcx/chat_gpt/completions"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.wxxcx.v1.chatGpt.ChatGpt/GetChatGptCompletions"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ChatGptHTTPClientImpl) Ping(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/wxxcx/chat_gpt/ping"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.wxxcx.v1.chatGpt.ChatGpt/Ping"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
