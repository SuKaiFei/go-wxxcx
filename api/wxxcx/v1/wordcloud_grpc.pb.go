// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: wxxcx/v1/wordcloud.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WordcloudClient is the client API for Wordcloud service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WordcloudClient interface {
	GenerateWordcloudImage(ctx context.Context, in *GenerateWordcloudImageRequest, opts ...grpc.CallOption) (*UploadImageReply, error)
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type wordcloudClient struct {
	cc grpc.ClientConnInterface
}

func NewWordcloudClient(cc grpc.ClientConnInterface) WordcloudClient {
	return &wordcloudClient{cc}
}

func (c *wordcloudClient) GenerateWordcloudImage(ctx context.Context, in *GenerateWordcloudImageRequest, opts ...grpc.CallOption) (*UploadImageReply, error) {
	out := new(UploadImageReply)
	err := c.cc.Invoke(ctx, "/wxxcx.v1.wordcloud.Wordcloud/GenerateWordcloudImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordcloudClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/wxxcx.v1.wordcloud.Wordcloud/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WordcloudServer is the server API for Wordcloud service.
// All implementations must embed UnimplementedWordcloudServer
// for forward compatibility
type WordcloudServer interface {
	GenerateWordcloudImage(context.Context, *GenerateWordcloudImageRequest) (*UploadImageReply, error)
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedWordcloudServer()
}

// UnimplementedWordcloudServer must be embedded to have forward compatible implementations.
type UnimplementedWordcloudServer struct {
}

func (UnimplementedWordcloudServer) GenerateWordcloudImage(context.Context, *GenerateWordcloudImageRequest) (*UploadImageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateWordcloudImage not implemented")
}
func (UnimplementedWordcloudServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedWordcloudServer) mustEmbedUnimplementedWordcloudServer() {}

// UnsafeWordcloudServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WordcloudServer will
// result in compilation errors.
type UnsafeWordcloudServer interface {
	mustEmbedUnimplementedWordcloudServer()
}

func RegisterWordcloudServer(s grpc.ServiceRegistrar, srv WordcloudServer) {
	s.RegisterService(&Wordcloud_ServiceDesc, srv)
}

func _Wordcloud_GenerateWordcloudImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateWordcloudImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordcloudServer).GenerateWordcloudImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wxxcx.v1.wordcloud.Wordcloud/GenerateWordcloudImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordcloudServer).GenerateWordcloudImage(ctx, req.(*GenerateWordcloudImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wordcloud_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordcloudServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wxxcx.v1.wordcloud.Wordcloud/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordcloudServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Wordcloud_ServiceDesc is the grpc.ServiceDesc for Wordcloud service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Wordcloud_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wxxcx.v1.wordcloud.Wordcloud",
	HandlerType: (*WordcloudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateWordcloudImage",
			Handler:    _Wordcloud_GenerateWordcloudImage_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Wordcloud_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wxxcx/v1/wordcloud.proto",
}
