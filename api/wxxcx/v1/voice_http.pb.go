// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.2.1

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type VoiceHTTPServer interface {
	GetVoiceDefault(context.Context, *GetVoiceDefaultRequest) (*GetVoiceDefaultReply, error)
	GetVoiceList(context.Context, *GetVoiceListRequest) (*GetVoiceListReply, error)
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
}

func RegisterVoiceHTTPServer(s *http.Server, srv VoiceHTTPServer) {
	r := s.Route("/")
	r.GET("/wxxcx/voice/list", _Voice_GetVoiceList0_HTTP_Handler(srv))
	r.GET("/wxxcx/voice/default", _Voice_GetVoiceDefault0_HTTP_Handler(srv))
	r.GET("/wxxcx/voice/ping", _Voice_Ping1_HTTP_Handler(srv))
}

func _Voice_GetVoiceList0_HTTP_Handler(srv VoiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetVoiceListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/wxxcx.v1.Voice/GetVoiceList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetVoiceList(ctx, req.(*GetVoiceListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetVoiceListReply)
		return ctx.Result(200, reply)
	}
}

func _Voice_GetVoiceDefault0_HTTP_Handler(srv VoiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetVoiceDefaultRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/wxxcx.v1.Voice/GetVoiceDefault")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetVoiceDefault(ctx, req.(*GetVoiceDefaultRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetVoiceDefaultReply)
		return ctx.Result(200, reply)
	}
}

func _Voice_Ping1_HTTP_Handler(srv VoiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/wxxcx.v1.Voice/Ping")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Ping(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type VoiceHTTPClient interface {
	GetVoiceDefault(ctx context.Context, req *GetVoiceDefaultRequest, opts ...http.CallOption) (rsp *GetVoiceDefaultReply, err error)
	GetVoiceList(ctx context.Context, req *GetVoiceListRequest, opts ...http.CallOption) (rsp *GetVoiceListReply, err error)
	Ping(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type VoiceHTTPClientImpl struct {
	cc *http.Client
}

func NewVoiceHTTPClient(client *http.Client) VoiceHTTPClient {
	return &VoiceHTTPClientImpl{client}
}

func (c *VoiceHTTPClientImpl) GetVoiceDefault(ctx context.Context, in *GetVoiceDefaultRequest, opts ...http.CallOption) (*GetVoiceDefaultReply, error) {
	var out GetVoiceDefaultReply
	pattern := "/wxxcx/voice/default"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/wxxcx.v1.Voice/GetVoiceDefault"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *VoiceHTTPClientImpl) GetVoiceList(ctx context.Context, in *GetVoiceListRequest, opts ...http.CallOption) (*GetVoiceListReply, error) {
	var out GetVoiceListReply
	pattern := "/wxxcx/voice/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/wxxcx.v1.Voice/GetVoiceList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *VoiceHTTPClientImpl) Ping(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/wxxcx/voice/ping"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/wxxcx.v1.Voice/Ping"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
