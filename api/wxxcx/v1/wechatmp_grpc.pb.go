// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: wxxcx/v1/wechatmp.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WechatMpClient is the client API for WechatMp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WechatMpClient interface {
	LoginWechatMp(ctx context.Context, in *LoginWechatMpRequest, opts ...grpc.CallOption) (*LoginWechatMpReply, error)
	SecurityCheckMsg(ctx context.Context, in *SecurityCheckMsgRequest, opts ...grpc.CallOption) (*SecurityCheckMsgReply, error)
}

type wechatMpClient struct {
	cc grpc.ClientConnInterface
}

func NewWechatMpClient(cc grpc.ClientConnInterface) WechatMpClient {
	return &wechatMpClient{cc}
}

func (c *wechatMpClient) LoginWechatMp(ctx context.Context, in *LoginWechatMpRequest, opts ...grpc.CallOption) (*LoginWechatMpReply, error) {
	out := new(LoginWechatMpReply)
	err := c.cc.Invoke(ctx, "/wxxcx.v1.wechatmp.WechatMp/LoginWechatMp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wechatMpClient) SecurityCheckMsg(ctx context.Context, in *SecurityCheckMsgRequest, opts ...grpc.CallOption) (*SecurityCheckMsgReply, error) {
	out := new(SecurityCheckMsgReply)
	err := c.cc.Invoke(ctx, "/wxxcx.v1.wechatmp.WechatMp/SecurityCheckMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WechatMpServer is the server API for WechatMp service.
// All implementations must embed UnimplementedWechatMpServer
// for forward compatibility
type WechatMpServer interface {
	LoginWechatMp(context.Context, *LoginWechatMpRequest) (*LoginWechatMpReply, error)
	SecurityCheckMsg(context.Context, *SecurityCheckMsgRequest) (*SecurityCheckMsgReply, error)
	mustEmbedUnimplementedWechatMpServer()
}

// UnimplementedWechatMpServer must be embedded to have forward compatible implementations.
type UnimplementedWechatMpServer struct {
}

func (UnimplementedWechatMpServer) LoginWechatMp(context.Context, *LoginWechatMpRequest) (*LoginWechatMpReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginWechatMp not implemented")
}
func (UnimplementedWechatMpServer) SecurityCheckMsg(context.Context, *SecurityCheckMsgRequest) (*SecurityCheckMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecurityCheckMsg not implemented")
}
func (UnimplementedWechatMpServer) mustEmbedUnimplementedWechatMpServer() {}

// UnsafeWechatMpServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WechatMpServer will
// result in compilation errors.
type UnsafeWechatMpServer interface {
	mustEmbedUnimplementedWechatMpServer()
}

func RegisterWechatMpServer(s grpc.ServiceRegistrar, srv WechatMpServer) {
	s.RegisterService(&WechatMp_ServiceDesc, srv)
}

func _WechatMp_LoginWechatMp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginWechatMpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WechatMpServer).LoginWechatMp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wxxcx.v1.wechatmp.WechatMp/LoginWechatMp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WechatMpServer).LoginWechatMp(ctx, req.(*LoginWechatMpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WechatMp_SecurityCheckMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityCheckMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WechatMpServer).SecurityCheckMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wxxcx.v1.wechatmp.WechatMp/SecurityCheckMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WechatMpServer).SecurityCheckMsg(ctx, req.(*SecurityCheckMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WechatMp_ServiceDesc is the grpc.ServiceDesc for WechatMp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WechatMp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wxxcx.v1.wechatmp.WechatMp",
	HandlerType: (*WechatMpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginWechatMp",
			Handler:    _WechatMp_LoginWechatMp_Handler,
		},
		{
			MethodName: "SecurityCheckMsg",
			Handler:    _WechatMp_SecurityCheckMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wxxcx/v1/wechatmp.proto",
}
