// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.2.1

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type CommunityHTTPServer interface {
	AddCommunityComment(context.Context, *AddCommunityCommentRequest) (*AddCommunityCommentReply, error)
	AddCommunityFeedback(context.Context, *AddCommunityFeedbackRequest) (*emptypb.Empty, error)
	DeleteCommunityMyArticle(context.Context, *DeleteCommunityByIdRequest) (*emptypb.Empty, error)
	DeleteCommunityMyComment(context.Context, *DeleteCommunityByIdRequest) (*emptypb.Empty, error)
	GetCommunityArticle(context.Context, *GetCommunityArticleRequest) (*GetCommunityArticleReply, error)
	GetCommunityArticleList(context.Context, *GetCommunityArticleListRequest) (*GetCommunityArticleListReply, error)
	GetCommunityCommentList(context.Context, *GetCommunityCommentListRequest) (*GetCommunityCommentListReply, error)
	GetCommunityMyArticleList(context.Context, *GetCommunityArticleListRequest) (*GetCommunityArticleListReply, error)
	GetCommunityMyProfile(context.Context, *GetCommunityMyProfileRequest) (*GetCommunityMyProfileReply, error)
	GetCosCredential(context.Context, *GetCosCredentialRequest) (*GetCosCredentialReply, error)
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	PushCommunityArticle(context.Context, *PushCommunityArticleRequest) (*emptypb.Empty, error)
	UpdateCommunityLike(context.Context, *UpdateCommunityLikeRequest) (*UpdateCommunityLikeReply, error)
	UpdateCommunityMyProfile(context.Context, *UpdateCommunityMyProfileRequest) (*emptypb.Empty, error)
}

func RegisterCommunityHTTPServer(s *http.Server, srv CommunityHTTPServer) {
	r := s.Route("/")
	r.DELETE("/wxxcx/community/my/article/delete", _Community_DeleteCommunityMyArticle0_HTTP_Handler(srv))
	r.DELETE("/wxxcx/community/my/comment/delete", _Community_DeleteCommunityMyComment0_HTTP_Handler(srv))
	r.GET("/wxxcx/community/my/article/list", _Community_GetCommunityMyArticleList0_HTTP_Handler(srv))
	r.GET("/wxxcx/community/my/profile", _Community_GetCommunityMyProfile0_HTTP_Handler(srv))
	r.PUT("/wxxcx/community/my/profile/update", _Community_UpdateCommunityMyProfile0_HTTP_Handler(srv))
	r.GET("/wxxcx/community/article/list", _Community_GetCommunityArticleList0_HTTP_Handler(srv))
	r.GET("/wxxcx/community/comment/list", _Community_GetCommunityCommentList0_HTTP_Handler(srv))
	r.GET("/wxxcx/community/article", _Community_GetCommunityArticle0_HTTP_Handler(srv))
	r.POST("/wxxcx/community/comment/add", _Community_AddCommunityComment0_HTTP_Handler(srv))
	r.POST("/wxxcx/community/feedback/add", _Community_AddCommunityFeedback0_HTTP_Handler(srv))
	r.POST("/wxxcx/community/article/push", _Community_PushCommunityArticle0_HTTP_Handler(srv))
	r.POST("/wxxcx/community/like", _Community_UpdateCommunityLike0_HTTP_Handler(srv))
	r.GET("/wxxcx/community/cos/credential", _Community_GetCosCredential0_HTTP_Handler(srv))
	r.GET("/wxxcx/community/ping", _Community_Ping1_HTTP_Handler(srv))
}

func _Community_DeleteCommunityMyArticle0_HTTP_Handler(srv CommunityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteCommunityByIdRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.wxxcx.v1.community.Community/DeleteCommunityMyArticle")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCommunityMyArticle(ctx, req.(*DeleteCommunityByIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Community_DeleteCommunityMyComment0_HTTP_Handler(srv CommunityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteCommunityByIdRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.wxxcx.v1.community.Community/DeleteCommunityMyComment")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCommunityMyComment(ctx, req.(*DeleteCommunityByIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Community_GetCommunityMyArticleList0_HTTP_Handler(srv CommunityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCommunityArticleListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.wxxcx.v1.community.Community/GetCommunityMyArticleList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCommunityMyArticleList(ctx, req.(*GetCommunityArticleListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCommunityArticleListReply)
		return ctx.Result(200, reply)
	}
}

func _Community_GetCommunityMyProfile0_HTTP_Handler(srv CommunityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCommunityMyProfileRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.wxxcx.v1.community.Community/GetCommunityMyProfile")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCommunityMyProfile(ctx, req.(*GetCommunityMyProfileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCommunityMyProfileReply)
		return ctx.Result(200, reply)
	}
}

func _Community_UpdateCommunityMyProfile0_HTTP_Handler(srv CommunityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateCommunityMyProfileRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.wxxcx.v1.community.Community/UpdateCommunityMyProfile")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCommunityMyProfile(ctx, req.(*UpdateCommunityMyProfileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Community_GetCommunityArticleList0_HTTP_Handler(srv CommunityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCommunityArticleListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.wxxcx.v1.community.Community/GetCommunityArticleList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCommunityArticleList(ctx, req.(*GetCommunityArticleListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCommunityArticleListReply)
		return ctx.Result(200, reply)
	}
}

func _Community_GetCommunityCommentList0_HTTP_Handler(srv CommunityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCommunityCommentListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.wxxcx.v1.community.Community/GetCommunityCommentList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCommunityCommentList(ctx, req.(*GetCommunityCommentListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCommunityCommentListReply)
		return ctx.Result(200, reply)
	}
}

func _Community_GetCommunityArticle0_HTTP_Handler(srv CommunityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCommunityArticleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.wxxcx.v1.community.Community/GetCommunityArticle")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCommunityArticle(ctx, req.(*GetCommunityArticleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCommunityArticleReply)
		return ctx.Result(200, reply)
	}
}

func _Community_AddCommunityComment0_HTTP_Handler(srv CommunityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddCommunityCommentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.wxxcx.v1.community.Community/AddCommunityComment")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddCommunityComment(ctx, req.(*AddCommunityCommentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddCommunityCommentReply)
		return ctx.Result(200, reply)
	}
}

func _Community_AddCommunityFeedback0_HTTP_Handler(srv CommunityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddCommunityFeedbackRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.wxxcx.v1.community.Community/AddCommunityFeedback")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddCommunityFeedback(ctx, req.(*AddCommunityFeedbackRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Community_PushCommunityArticle0_HTTP_Handler(srv CommunityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PushCommunityArticleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.wxxcx.v1.community.Community/PushCommunityArticle")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PushCommunityArticle(ctx, req.(*PushCommunityArticleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Community_UpdateCommunityLike0_HTTP_Handler(srv CommunityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateCommunityLikeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.wxxcx.v1.community.Community/UpdateCommunityLike")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCommunityLike(ctx, req.(*UpdateCommunityLikeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateCommunityLikeReply)
		return ctx.Result(200, reply)
	}
}

func _Community_GetCosCredential0_HTTP_Handler(srv CommunityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCosCredentialRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.wxxcx.v1.community.Community/GetCosCredential")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCosCredential(ctx, req.(*GetCosCredentialRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCosCredentialReply)
		return ctx.Result(200, reply)
	}
}

func _Community_Ping1_HTTP_Handler(srv CommunityHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.wxxcx.v1.community.Community/Ping")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Ping(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type CommunityHTTPClient interface {
	AddCommunityComment(ctx context.Context, req *AddCommunityCommentRequest, opts ...http.CallOption) (rsp *AddCommunityCommentReply, err error)
	AddCommunityFeedback(ctx context.Context, req *AddCommunityFeedbackRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteCommunityMyArticle(ctx context.Context, req *DeleteCommunityByIdRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteCommunityMyComment(ctx context.Context, req *DeleteCommunityByIdRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetCommunityArticle(ctx context.Context, req *GetCommunityArticleRequest, opts ...http.CallOption) (rsp *GetCommunityArticleReply, err error)
	GetCommunityArticleList(ctx context.Context, req *GetCommunityArticleListRequest, opts ...http.CallOption) (rsp *GetCommunityArticleListReply, err error)
	GetCommunityCommentList(ctx context.Context, req *GetCommunityCommentListRequest, opts ...http.CallOption) (rsp *GetCommunityCommentListReply, err error)
	GetCommunityMyArticleList(ctx context.Context, req *GetCommunityArticleListRequest, opts ...http.CallOption) (rsp *GetCommunityArticleListReply, err error)
	GetCommunityMyProfile(ctx context.Context, req *GetCommunityMyProfileRequest, opts ...http.CallOption) (rsp *GetCommunityMyProfileReply, err error)
	GetCosCredential(ctx context.Context, req *GetCosCredentialRequest, opts ...http.CallOption) (rsp *GetCosCredentialReply, err error)
	Ping(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	PushCommunityArticle(ctx context.Context, req *PushCommunityArticleRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateCommunityLike(ctx context.Context, req *UpdateCommunityLikeRequest, opts ...http.CallOption) (rsp *UpdateCommunityLikeReply, err error)
	UpdateCommunityMyProfile(ctx context.Context, req *UpdateCommunityMyProfileRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type CommunityHTTPClientImpl struct {
	cc *http.Client
}

func NewCommunityHTTPClient(client *http.Client) CommunityHTTPClient {
	return &CommunityHTTPClientImpl{client}
}

func (c *CommunityHTTPClientImpl) AddCommunityComment(ctx context.Context, in *AddCommunityCommentRequest, opts ...http.CallOption) (*AddCommunityCommentReply, error) {
	var out AddCommunityCommentReply
	pattern := "/wxxcx/community/comment/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.wxxcx.v1.community.Community/AddCommunityComment"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CommunityHTTPClientImpl) AddCommunityFeedback(ctx context.Context, in *AddCommunityFeedbackRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/wxxcx/community/feedback/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.wxxcx.v1.community.Community/AddCommunityFeedback"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CommunityHTTPClientImpl) DeleteCommunityMyArticle(ctx context.Context, in *DeleteCommunityByIdRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/wxxcx/community/my/article/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.wxxcx.v1.community.Community/DeleteCommunityMyArticle"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CommunityHTTPClientImpl) DeleteCommunityMyComment(ctx context.Context, in *DeleteCommunityByIdRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/wxxcx/community/my/comment/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.wxxcx.v1.community.Community/DeleteCommunityMyComment"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CommunityHTTPClientImpl) GetCommunityArticle(ctx context.Context, in *GetCommunityArticleRequest, opts ...http.CallOption) (*GetCommunityArticleReply, error) {
	var out GetCommunityArticleReply
	pattern := "/wxxcx/community/article"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.wxxcx.v1.community.Community/GetCommunityArticle"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CommunityHTTPClientImpl) GetCommunityArticleList(ctx context.Context, in *GetCommunityArticleListRequest, opts ...http.CallOption) (*GetCommunityArticleListReply, error) {
	var out GetCommunityArticleListReply
	pattern := "/wxxcx/community/article/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.wxxcx.v1.community.Community/GetCommunityArticleList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CommunityHTTPClientImpl) GetCommunityCommentList(ctx context.Context, in *GetCommunityCommentListRequest, opts ...http.CallOption) (*GetCommunityCommentListReply, error) {
	var out GetCommunityCommentListReply
	pattern := "/wxxcx/community/comment/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.wxxcx.v1.community.Community/GetCommunityCommentList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CommunityHTTPClientImpl) GetCommunityMyArticleList(ctx context.Context, in *GetCommunityArticleListRequest, opts ...http.CallOption) (*GetCommunityArticleListReply, error) {
	var out GetCommunityArticleListReply
	pattern := "/wxxcx/community/my/article/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.wxxcx.v1.community.Community/GetCommunityMyArticleList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CommunityHTTPClientImpl) GetCommunityMyProfile(ctx context.Context, in *GetCommunityMyProfileRequest, opts ...http.CallOption) (*GetCommunityMyProfileReply, error) {
	var out GetCommunityMyProfileReply
	pattern := "/wxxcx/community/my/profile"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.wxxcx.v1.community.Community/GetCommunityMyProfile"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CommunityHTTPClientImpl) GetCosCredential(ctx context.Context, in *GetCosCredentialRequest, opts ...http.CallOption) (*GetCosCredentialReply, error) {
	var out GetCosCredentialReply
	pattern := "/wxxcx/community/cos/credential"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.wxxcx.v1.community.Community/GetCosCredential"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CommunityHTTPClientImpl) Ping(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/wxxcx/community/ping"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.wxxcx.v1.community.Community/Ping"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CommunityHTTPClientImpl) PushCommunityArticle(ctx context.Context, in *PushCommunityArticleRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/wxxcx/community/article/push"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.wxxcx.v1.community.Community/PushCommunityArticle"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CommunityHTTPClientImpl) UpdateCommunityLike(ctx context.Context, in *UpdateCommunityLikeRequest, opts ...http.CallOption) (*UpdateCommunityLikeReply, error) {
	var out UpdateCommunityLikeReply
	pattern := "/wxxcx/community/like"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.wxxcx.v1.community.Community/UpdateCommunityLike"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CommunityHTTPClientImpl) UpdateCommunityMyProfile(ctx context.Context, in *UpdateCommunityMyProfileRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/wxxcx/community/my/profile/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.wxxcx.v1.community.Community/UpdateCommunityMyProfile"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
