// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.2.1

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type BqbHTTPServer interface {
	GetBqbIndex(context.Context, *GetBqbIndexRequest) (*GetBqbIndexReply, error)
	GetBqbList(context.Context, *GetBqbListRequest) (*GetBqbListReply, error)
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
}

func RegisterBqbHTTPServer(s *http.Server, srv BqbHTTPServer) {
	r := s.Route("/")
	r.GET("/wxxcx/bqb/index", _Bqb_GetBqbIndex0_HTTP_Handler(srv))
	r.GET("/wxxcx/bqb/list", _Bqb_GetBqbList0_HTTP_Handler(srv))
	r.GET("/wxxcx/bqb/ping", _Bqb_Ping0_HTTP_Handler(srv))
}

func _Bqb_GetBqbIndex0_HTTP_Handler(srv BqbHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBqbIndexRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/wxxcx.v1.Bqb/GetBqbIndex")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBqbIndex(ctx, req.(*GetBqbIndexRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetBqbIndexReply)
		return ctx.Result(200, reply)
	}
}

func _Bqb_GetBqbList0_HTTP_Handler(srv BqbHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBqbListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/wxxcx.v1.Bqb/GetBqbList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBqbList(ctx, req.(*GetBqbListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetBqbListReply)
		return ctx.Result(200, reply)
	}
}

func _Bqb_Ping0_HTTP_Handler(srv BqbHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/wxxcx.v1.Bqb/Ping")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Ping(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type BqbHTTPClient interface {
	GetBqbIndex(ctx context.Context, req *GetBqbIndexRequest, opts ...http.CallOption) (rsp *GetBqbIndexReply, err error)
	GetBqbList(ctx context.Context, req *GetBqbListRequest, opts ...http.CallOption) (rsp *GetBqbListReply, err error)
	Ping(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type BqbHTTPClientImpl struct {
	cc *http.Client
}

func NewBqbHTTPClient(client *http.Client) BqbHTTPClient {
	return &BqbHTTPClientImpl{client}
}

func (c *BqbHTTPClientImpl) GetBqbIndex(ctx context.Context, in *GetBqbIndexRequest, opts ...http.CallOption) (*GetBqbIndexReply, error) {
	var out GetBqbIndexReply
	pattern := "/wxxcx/bqb/index"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/wxxcx.v1.Bqb/GetBqbIndex"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BqbHTTPClientImpl) GetBqbList(ctx context.Context, in *GetBqbListRequest, opts ...http.CallOption) (*GetBqbListReply, error) {
	var out GetBqbListReply
	pattern := "/wxxcx/bqb/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/wxxcx.v1.Bqb/GetBqbList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BqbHTTPClientImpl) Ping(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/wxxcx/bqb/ping"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/wxxcx.v1.Bqb/Ping"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
