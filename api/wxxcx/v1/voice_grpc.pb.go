// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: wxxcx/v1/voice.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VoiceClient is the client API for Voice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VoiceClient interface {
	GetVoiceList(ctx context.Context, in *GetVoiceListRequest, opts ...grpc.CallOption) (*GetVoiceListReply, error)
	GetVoiceDefault(ctx context.Context, in *GetVoiceDefaultRequest, opts ...grpc.CallOption) (*GetVoiceReply, error)
	GetVoiceById(ctx context.Context, in *GetVoiceByIdRequest, opts ...grpc.CallOption) (*GetVoiceReply, error)
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type voiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVoiceClient(cc grpc.ClientConnInterface) VoiceClient {
	return &voiceClient{cc}
}

func (c *voiceClient) GetVoiceList(ctx context.Context, in *GetVoiceListRequest, opts ...grpc.CallOption) (*GetVoiceListReply, error) {
	out := new(GetVoiceListReply)
	err := c.cc.Invoke(ctx, "/wxxcx.v1.voice.Voice/GetVoiceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voiceClient) GetVoiceDefault(ctx context.Context, in *GetVoiceDefaultRequest, opts ...grpc.CallOption) (*GetVoiceReply, error) {
	out := new(GetVoiceReply)
	err := c.cc.Invoke(ctx, "/wxxcx.v1.voice.Voice/GetVoiceDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voiceClient) GetVoiceById(ctx context.Context, in *GetVoiceByIdRequest, opts ...grpc.CallOption) (*GetVoiceReply, error) {
	out := new(GetVoiceReply)
	err := c.cc.Invoke(ctx, "/wxxcx.v1.voice.Voice/GetVoiceById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/wxxcx.v1.voice.Voice/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VoiceServer is the server API for Voice service.
// All implementations must embed UnimplementedVoiceServer
// for forward compatibility
type VoiceServer interface {
	GetVoiceList(context.Context, *GetVoiceListRequest) (*GetVoiceListReply, error)
	GetVoiceDefault(context.Context, *GetVoiceDefaultRequest) (*GetVoiceReply, error)
	GetVoiceById(context.Context, *GetVoiceByIdRequest) (*GetVoiceReply, error)
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedVoiceServer()
}

// UnimplementedVoiceServer must be embedded to have forward compatible implementations.
type UnimplementedVoiceServer struct {
}

func (UnimplementedVoiceServer) GetVoiceList(context.Context, *GetVoiceListRequest) (*GetVoiceListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVoiceList not implemented")
}
func (UnimplementedVoiceServer) GetVoiceDefault(context.Context, *GetVoiceDefaultRequest) (*GetVoiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVoiceDefault not implemented")
}
func (UnimplementedVoiceServer) GetVoiceById(context.Context, *GetVoiceByIdRequest) (*GetVoiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVoiceById not implemented")
}
func (UnimplementedVoiceServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedVoiceServer) mustEmbedUnimplementedVoiceServer() {}

// UnsafeVoiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VoiceServer will
// result in compilation errors.
type UnsafeVoiceServer interface {
	mustEmbedUnimplementedVoiceServer()
}

func RegisterVoiceServer(s grpc.ServiceRegistrar, srv VoiceServer) {
	s.RegisterService(&Voice_ServiceDesc, srv)
}

func _Voice_GetVoiceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVoiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoiceServer).GetVoiceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wxxcx.v1.voice.Voice/GetVoiceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoiceServer).GetVoiceList(ctx, req.(*GetVoiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Voice_GetVoiceDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVoiceDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoiceServer).GetVoiceDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wxxcx.v1.voice.Voice/GetVoiceDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoiceServer).GetVoiceDefault(ctx, req.(*GetVoiceDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Voice_GetVoiceById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVoiceByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoiceServer).GetVoiceById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wxxcx.v1.voice.Voice/GetVoiceById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoiceServer).GetVoiceById(ctx, req.(*GetVoiceByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Voice_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wxxcx.v1.voice.Voice/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoiceServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Voice_ServiceDesc is the grpc.ServiceDesc for Voice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Voice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wxxcx.v1.voice.Voice",
	HandlerType: (*VoiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVoiceList",
			Handler:    _Voice_GetVoiceList_Handler,
		},
		{
			MethodName: "GetVoiceDefault",
			Handler:    _Voice_GetVoiceDefault_Handler,
		},
		{
			MethodName: "GetVoiceById",
			Handler:    _Voice_GetVoiceById_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Voice_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wxxcx/v1/voice.proto",
}
