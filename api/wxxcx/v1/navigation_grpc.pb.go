// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: wxxcx/v1/navigation.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NavigationClient is the client API for Navigation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NavigationClient interface {
	GetNavigations(ctx context.Context, in *GetNavigationsRequest, opts ...grpc.CallOption) (*GetNavigationsReply, error)
}

type navigationClient struct {
	cc grpc.ClientConnInterface
}

func NewNavigationClient(cc grpc.ClientConnInterface) NavigationClient {
	return &navigationClient{cc}
}

func (c *navigationClient) GetNavigations(ctx context.Context, in *GetNavigationsRequest, opts ...grpc.CallOption) (*GetNavigationsReply, error) {
	out := new(GetNavigationsReply)
	err := c.cc.Invoke(ctx, "/api.wxxcx.v1.Navigation/GetNavigations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NavigationServer is the server API for Navigation service.
// All implementations must embed UnimplementedNavigationServer
// for forward compatibility
type NavigationServer interface {
	GetNavigations(context.Context, *GetNavigationsRequest) (*GetNavigationsReply, error)
	mustEmbedUnimplementedNavigationServer()
}

// UnimplementedNavigationServer must be embedded to have forward compatible implementations.
type UnimplementedNavigationServer struct {
}

func (UnimplementedNavigationServer) GetNavigations(context.Context, *GetNavigationsRequest) (*GetNavigationsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNavigations not implemented")
}
func (UnimplementedNavigationServer) mustEmbedUnimplementedNavigationServer() {}

// UnsafeNavigationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NavigationServer will
// result in compilation errors.
type UnsafeNavigationServer interface {
	mustEmbedUnimplementedNavigationServer()
}

func RegisterNavigationServer(s grpc.ServiceRegistrar, srv NavigationServer) {
	s.RegisterService(&Navigation_ServiceDesc, srv)
}

func _Navigation_GetNavigations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNavigationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NavigationServer).GetNavigations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.wxxcx.v1.Navigation/GetNavigations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NavigationServer).GetNavigations(ctx, req.(*GetNavigationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Navigation_ServiceDesc is the grpc.ServiceDesc for Navigation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Navigation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.wxxcx.v1.Navigation",
	HandlerType: (*NavigationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNavigations",
			Handler:    _Navigation_GetNavigations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wxxcx/v1/navigation.proto",
}
