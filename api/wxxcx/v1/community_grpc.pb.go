// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: wxxcx/v1/community.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommunityClient is the client API for Community service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommunityClient interface {
	DeleteCommunityMyArticle(ctx context.Context, in *DeleteCommunityByIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteCommunityMyComment(ctx context.Context, in *DeleteCommunityByIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCommunityMyArticleList(ctx context.Context, in *GetCommunityArticleListRequest, opts ...grpc.CallOption) (*GetCommunityArticleListReply, error)
	GetCommunityMyProfile(ctx context.Context, in *GetCommunityMyProfileRequest, opts ...grpc.CallOption) (*GetCommunityMyProfileReply, error)
	UpdateCommunityMyProfile(ctx context.Context, in *UpdateCommunityMyProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCommunityArticleList(ctx context.Context, in *GetCommunityArticleListRequest, opts ...grpc.CallOption) (*GetCommunityArticleListReply, error)
	GetCommunityCommentList(ctx context.Context, in *GetCommunityCommentListRequest, opts ...grpc.CallOption) (*GetCommunityCommentListReply, error)
	GetCommunityArticle(ctx context.Context, in *GetCommunityArticleRequest, opts ...grpc.CallOption) (*GetCommunityArticleReply, error)
	AddCommunityComment(ctx context.Context, in *AddCommunityCommentRequest, opts ...grpc.CallOption) (*AddCommunityCommentReply, error)
	AddCommunityFeedback(ctx context.Context, in *AddCommunityFeedbackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PushCommunityArticle(ctx context.Context, in *PushCommunityArticleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateCommunityLike(ctx context.Context, in *UpdateCommunityLikeRequest, opts ...grpc.CallOption) (*UpdateCommunityLikeReply, error)
	GetCosCredential(ctx context.Context, in *GetCosCredentialRequest, opts ...grpc.CallOption) (*GetCosCredentialReply, error)
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type communityClient struct {
	cc grpc.ClientConnInterface
}

func NewCommunityClient(cc grpc.ClientConnInterface) CommunityClient {
	return &communityClient{cc}
}

func (c *communityClient) DeleteCommunityMyArticle(ctx context.Context, in *DeleteCommunityByIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.wxxcx.v1.community.Community/DeleteCommunityMyArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) DeleteCommunityMyComment(ctx context.Context, in *DeleteCommunityByIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.wxxcx.v1.community.Community/DeleteCommunityMyComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) GetCommunityMyArticleList(ctx context.Context, in *GetCommunityArticleListRequest, opts ...grpc.CallOption) (*GetCommunityArticleListReply, error) {
	out := new(GetCommunityArticleListReply)
	err := c.cc.Invoke(ctx, "/api.wxxcx.v1.community.Community/GetCommunityMyArticleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) GetCommunityMyProfile(ctx context.Context, in *GetCommunityMyProfileRequest, opts ...grpc.CallOption) (*GetCommunityMyProfileReply, error) {
	out := new(GetCommunityMyProfileReply)
	err := c.cc.Invoke(ctx, "/api.wxxcx.v1.community.Community/GetCommunityMyProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) UpdateCommunityMyProfile(ctx context.Context, in *UpdateCommunityMyProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.wxxcx.v1.community.Community/UpdateCommunityMyProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) GetCommunityArticleList(ctx context.Context, in *GetCommunityArticleListRequest, opts ...grpc.CallOption) (*GetCommunityArticleListReply, error) {
	out := new(GetCommunityArticleListReply)
	err := c.cc.Invoke(ctx, "/api.wxxcx.v1.community.Community/GetCommunityArticleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) GetCommunityCommentList(ctx context.Context, in *GetCommunityCommentListRequest, opts ...grpc.CallOption) (*GetCommunityCommentListReply, error) {
	out := new(GetCommunityCommentListReply)
	err := c.cc.Invoke(ctx, "/api.wxxcx.v1.community.Community/GetCommunityCommentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) GetCommunityArticle(ctx context.Context, in *GetCommunityArticleRequest, opts ...grpc.CallOption) (*GetCommunityArticleReply, error) {
	out := new(GetCommunityArticleReply)
	err := c.cc.Invoke(ctx, "/api.wxxcx.v1.community.Community/GetCommunityArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) AddCommunityComment(ctx context.Context, in *AddCommunityCommentRequest, opts ...grpc.CallOption) (*AddCommunityCommentReply, error) {
	out := new(AddCommunityCommentReply)
	err := c.cc.Invoke(ctx, "/api.wxxcx.v1.community.Community/AddCommunityComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) AddCommunityFeedback(ctx context.Context, in *AddCommunityFeedbackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.wxxcx.v1.community.Community/AddCommunityFeedback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) PushCommunityArticle(ctx context.Context, in *PushCommunityArticleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.wxxcx.v1.community.Community/PushCommunityArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) UpdateCommunityLike(ctx context.Context, in *UpdateCommunityLikeRequest, opts ...grpc.CallOption) (*UpdateCommunityLikeReply, error) {
	out := new(UpdateCommunityLikeReply)
	err := c.cc.Invoke(ctx, "/api.wxxcx.v1.community.Community/UpdateCommunityLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) GetCosCredential(ctx context.Context, in *GetCosCredentialRequest, opts ...grpc.CallOption) (*GetCosCredentialReply, error) {
	out := new(GetCosCredentialReply)
	err := c.cc.Invoke(ctx, "/api.wxxcx.v1.community.Community/GetCosCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communityClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.wxxcx.v1.community.Community/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommunityServer is the server API for Community service.
// All implementations must embed UnimplementedCommunityServer
// for forward compatibility
type CommunityServer interface {
	DeleteCommunityMyArticle(context.Context, *DeleteCommunityByIdRequest) (*emptypb.Empty, error)
	DeleteCommunityMyComment(context.Context, *DeleteCommunityByIdRequest) (*emptypb.Empty, error)
	GetCommunityMyArticleList(context.Context, *GetCommunityArticleListRequest) (*GetCommunityArticleListReply, error)
	GetCommunityMyProfile(context.Context, *GetCommunityMyProfileRequest) (*GetCommunityMyProfileReply, error)
	UpdateCommunityMyProfile(context.Context, *UpdateCommunityMyProfileRequest) (*emptypb.Empty, error)
	GetCommunityArticleList(context.Context, *GetCommunityArticleListRequest) (*GetCommunityArticleListReply, error)
	GetCommunityCommentList(context.Context, *GetCommunityCommentListRequest) (*GetCommunityCommentListReply, error)
	GetCommunityArticle(context.Context, *GetCommunityArticleRequest) (*GetCommunityArticleReply, error)
	AddCommunityComment(context.Context, *AddCommunityCommentRequest) (*AddCommunityCommentReply, error)
	AddCommunityFeedback(context.Context, *AddCommunityFeedbackRequest) (*emptypb.Empty, error)
	PushCommunityArticle(context.Context, *PushCommunityArticleRequest) (*emptypb.Empty, error)
	UpdateCommunityLike(context.Context, *UpdateCommunityLikeRequest) (*UpdateCommunityLikeReply, error)
	GetCosCredential(context.Context, *GetCosCredentialRequest) (*GetCosCredentialReply, error)
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedCommunityServer()
}

// UnimplementedCommunityServer must be embedded to have forward compatible implementations.
type UnimplementedCommunityServer struct {
}

func (UnimplementedCommunityServer) DeleteCommunityMyArticle(context.Context, *DeleteCommunityByIdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommunityMyArticle not implemented")
}
func (UnimplementedCommunityServer) DeleteCommunityMyComment(context.Context, *DeleteCommunityByIdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommunityMyComment not implemented")
}
func (UnimplementedCommunityServer) GetCommunityMyArticleList(context.Context, *GetCommunityArticleListRequest) (*GetCommunityArticleListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommunityMyArticleList not implemented")
}
func (UnimplementedCommunityServer) GetCommunityMyProfile(context.Context, *GetCommunityMyProfileRequest) (*GetCommunityMyProfileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommunityMyProfile not implemented")
}
func (UnimplementedCommunityServer) UpdateCommunityMyProfile(context.Context, *UpdateCommunityMyProfileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCommunityMyProfile not implemented")
}
func (UnimplementedCommunityServer) GetCommunityArticleList(context.Context, *GetCommunityArticleListRequest) (*GetCommunityArticleListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommunityArticleList not implemented")
}
func (UnimplementedCommunityServer) GetCommunityCommentList(context.Context, *GetCommunityCommentListRequest) (*GetCommunityCommentListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommunityCommentList not implemented")
}
func (UnimplementedCommunityServer) GetCommunityArticle(context.Context, *GetCommunityArticleRequest) (*GetCommunityArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommunityArticle not implemented")
}
func (UnimplementedCommunityServer) AddCommunityComment(context.Context, *AddCommunityCommentRequest) (*AddCommunityCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCommunityComment not implemented")
}
func (UnimplementedCommunityServer) AddCommunityFeedback(context.Context, *AddCommunityFeedbackRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCommunityFeedback not implemented")
}
func (UnimplementedCommunityServer) PushCommunityArticle(context.Context, *PushCommunityArticleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushCommunityArticle not implemented")
}
func (UnimplementedCommunityServer) UpdateCommunityLike(context.Context, *UpdateCommunityLikeRequest) (*UpdateCommunityLikeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCommunityLike not implemented")
}
func (UnimplementedCommunityServer) GetCosCredential(context.Context, *GetCosCredentialRequest) (*GetCosCredentialReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCosCredential not implemented")
}
func (UnimplementedCommunityServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedCommunityServer) mustEmbedUnimplementedCommunityServer() {}

// UnsafeCommunityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommunityServer will
// result in compilation errors.
type UnsafeCommunityServer interface {
	mustEmbedUnimplementedCommunityServer()
}

func RegisterCommunityServer(s grpc.ServiceRegistrar, srv CommunityServer) {
	s.RegisterService(&Community_ServiceDesc, srv)
}

func _Community_DeleteCommunityMyArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommunityByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).DeleteCommunityMyArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.wxxcx.v1.community.Community/DeleteCommunityMyArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).DeleteCommunityMyArticle(ctx, req.(*DeleteCommunityByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_DeleteCommunityMyComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommunityByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).DeleteCommunityMyComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.wxxcx.v1.community.Community/DeleteCommunityMyComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).DeleteCommunityMyComment(ctx, req.(*DeleteCommunityByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_GetCommunityMyArticleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommunityArticleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).GetCommunityMyArticleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.wxxcx.v1.community.Community/GetCommunityMyArticleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).GetCommunityMyArticleList(ctx, req.(*GetCommunityArticleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_GetCommunityMyProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommunityMyProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).GetCommunityMyProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.wxxcx.v1.community.Community/GetCommunityMyProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).GetCommunityMyProfile(ctx, req.(*GetCommunityMyProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_UpdateCommunityMyProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommunityMyProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).UpdateCommunityMyProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.wxxcx.v1.community.Community/UpdateCommunityMyProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).UpdateCommunityMyProfile(ctx, req.(*UpdateCommunityMyProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_GetCommunityArticleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommunityArticleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).GetCommunityArticleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.wxxcx.v1.community.Community/GetCommunityArticleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).GetCommunityArticleList(ctx, req.(*GetCommunityArticleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_GetCommunityCommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommunityCommentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).GetCommunityCommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.wxxcx.v1.community.Community/GetCommunityCommentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).GetCommunityCommentList(ctx, req.(*GetCommunityCommentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_GetCommunityArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommunityArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).GetCommunityArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.wxxcx.v1.community.Community/GetCommunityArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).GetCommunityArticle(ctx, req.(*GetCommunityArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_AddCommunityComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommunityCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).AddCommunityComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.wxxcx.v1.community.Community/AddCommunityComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).AddCommunityComment(ctx, req.(*AddCommunityCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_AddCommunityFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommunityFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).AddCommunityFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.wxxcx.v1.community.Community/AddCommunityFeedback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).AddCommunityFeedback(ctx, req.(*AddCommunityFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_PushCommunityArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushCommunityArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).PushCommunityArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.wxxcx.v1.community.Community/PushCommunityArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).PushCommunityArticle(ctx, req.(*PushCommunityArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_UpdateCommunityLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommunityLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).UpdateCommunityLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.wxxcx.v1.community.Community/UpdateCommunityLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).UpdateCommunityLike(ctx, req.(*UpdateCommunityLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_GetCosCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCosCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).GetCosCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.wxxcx.v1.community.Community/GetCosCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).GetCosCredential(ctx, req.(*GetCosCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Community_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunityServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.wxxcx.v1.community.Community/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunityServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Community_ServiceDesc is the grpc.ServiceDesc for Community service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Community_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.wxxcx.v1.community.Community",
	HandlerType: (*CommunityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteCommunityMyArticle",
			Handler:    _Community_DeleteCommunityMyArticle_Handler,
		},
		{
			MethodName: "DeleteCommunityMyComment",
			Handler:    _Community_DeleteCommunityMyComment_Handler,
		},
		{
			MethodName: "GetCommunityMyArticleList",
			Handler:    _Community_GetCommunityMyArticleList_Handler,
		},
		{
			MethodName: "GetCommunityMyProfile",
			Handler:    _Community_GetCommunityMyProfile_Handler,
		},
		{
			MethodName: "UpdateCommunityMyProfile",
			Handler:    _Community_UpdateCommunityMyProfile_Handler,
		},
		{
			MethodName: "GetCommunityArticleList",
			Handler:    _Community_GetCommunityArticleList_Handler,
		},
		{
			MethodName: "GetCommunityCommentList",
			Handler:    _Community_GetCommunityCommentList_Handler,
		},
		{
			MethodName: "GetCommunityArticle",
			Handler:    _Community_GetCommunityArticle_Handler,
		},
		{
			MethodName: "AddCommunityComment",
			Handler:    _Community_AddCommunityComment_Handler,
		},
		{
			MethodName: "AddCommunityFeedback",
			Handler:    _Community_AddCommunityFeedback_Handler,
		},
		{
			MethodName: "PushCommunityArticle",
			Handler:    _Community_PushCommunityArticle_Handler,
		},
		{
			MethodName: "UpdateCommunityLike",
			Handler:    _Community_UpdateCommunityLike_Handler,
		},
		{
			MethodName: "GetCosCredential",
			Handler:    _Community_GetCosCredential_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Community_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wxxcx/v1/community.proto",
}
